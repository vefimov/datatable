// Generated by CoffeeScript 1.5.0

/*
 * This work is licensed under the Creative Commons Attribution-NoDerivs 3.0 Unported License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nd/3.0/ or send a
 * letter to Creative Commons, 444 Castro Street, Suite 900, Mountain View, California, 94041, USA.
*/


(function() {
  var _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if ((_ref = window.Ex) == null) {
    window.Ex = {};
  }

  /*
   * Provides and manages Ex.AttributeProvider instances
  */


  Ex.AttributeProvider = (function() {

    function AttributeProvider() {}

    AttributeProvider.prototype.__init = function() {
      this.cfg = {};
      return this.__eventEmitter = jQuery(this);
    };

    /*
     * Execute all handlers and behaviors attached to the matched elements for the given event type.
    */


    AttributeProvider.prototype.emit = function(evt, data) {
      return this.__eventEmitter.trigger(evt, data);
    };

    /*
     * Attach a handler to an event for the elements. The handler is executed at most once per element.
    */


    AttributeProvider.prototype.once = function(evt, handler) {
      return this.__eventEmitter.one(evt, handler);
    };

    /*
     * Attach an event handler function for one or more events to the selected elements.
    */


    AttributeProvider.prototype.on = function(evt, handler) {
      return this.__eventEmitter.bind(evt, handler);
    };

    /*
     * Remove an event handler.
    */


    AttributeProvider.prototype.off = function(evt, handler) {
      return this.__eventEmitter.unbind(evt, handler);
    };

    /*
     * Sets the value of a config.
    */


    AttributeProvider.prototype.set = function(name, value) {
      this.cfg[name] = value;
      return this.emit("" + name + "Change", value);
    };

    /*
     * Returns the current value of the attribute.
    */


    AttributeProvider.prototype.get = function(name) {
      return this.cfg[name];
    };

    return AttributeProvider;

  })();

  /*
   * DataTable class
   * The constructor accepts the following parameters:
   *  - container {HTMLElement} Container element for the TABLE.
   *  - configs {Object} (optional) Object literal of configuration values.
  */


  Ex.DataTable = (function() {

    $.extend(DataTable.prototype, Ex.AttributeProvider.prototype);

    function DataTable(container, configs) {
      this.onEventSortColumn = __bind(this.onEventSortColumn, this);
      this.render = __bind(this.render, this);
      var defaults, sortedBy;
      this.__init();
      defaults = {
        paginator: null,
        columns: [],
        store: null,
        filters: [],
        sortedBy: {
          key: null,
          dir: "ASC"
        }
      };
      this.container = jQuery(container);
      this.cfg = $.extend(defaults, configs);
      this.theadEl = jQuery("<thead />");
      this.tbodyEl = jQuery("<tbody />");
      this.container.empty().append(this.theadEl).append(this.tbodyEl);
      this.renderColumns();
      sortedBy = this.get("sortedBy");
      if (sortedBy.key) {
        this.sortColumn(this.getColumn("key", sortedBy.key), sortedBy.dir);
      } else {
        this.render();
      }
      this.initEvents();
    }

    DataTable.prototype.initEvents = function() {
      var filter, paginator, _i, _len, _ref1, _results;
      if (paginator = this.get("paginator")) {
        paginator.on("currentPageChange", this.render);
        paginator.on("rowsPerPageChange", this.render);
      }
      this.getStore().on("onDataChange", function(data) {
        if (paginator) {
          return paginator.setTotalRecords(data.length);
        } else {
          return this.render();
        }
      });
      _ref1 = this.get("filters");
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        filter = _ref1[_i];
        _results.push(filter.on("valueChange", this.render));
      }
      return _results;
    };

    /*
     * Find column by attribute name and its value
    */


    DataTable.prototype.getColumn = function(attrName, attrValue) {
      var column, columns, _i, _len;
      columns = this.get("columns");
      for (_i = 0, _len = columns.length; _i < _len; _i++) {
        column = columns[_i];
        if (column[attrName] === attrValue) {
          return column;
        }
      }
      return null;
    };

    /*
     * Get store instance
    */


    DataTable.prototype.getStore = function() {
      return this.get("store");
    };

    /*getData: ->
      @_data
      
    setData: (data) ->
      @_data = data
    */


    /*
     * Render the TH elements
    */


    DataTable.prototype.renderColumns = function() {
      var column, columns, thEl, theadRowEl, _i, _len;
      theadRowEl = jQuery("<tr />");
      columns = this.get("columns");
      for (_i = 0, _len = columns.length; _i < _len; _i++) {
        column = columns[_i];
        thEl = jQuery("<th />");
        if (column.sortable) {
          thEl.addClass("ex-dt-sortable");
        }
        if (column.hidden) {
          thEl.addClass("ex-dt-hidden").css("display", "none");
        }
        thEl.addClass("ex-dt-col-" + column.key);
        thEl.append(jQuery("<div />").text(column.label));
        thEl.on("click", this.onEventSortColumn.bind(null, column));
        column.thEl = thEl;
        theadRowEl.append(thEl);
      }
      return this.theadEl.append(theadRowEl);
    };

    /*
     * Renders the view with existing records
    */


    DataTable.prototype.render = function() {
      var column, columns, filter, filters, from, paginator, record, rowFormatter, sortedBy, store, storeData, tdEl, to, trEl, _i, _j, _k, _len, _len1, _len2,
        _this = this;
      console.time("Rendering data");
      store = this.getStore();
      storeData = store.getData();
      columns = this.get("columns");
      sortedBy = this.get("sortedBy");
      rowFormatter = this.get("rowFormatter");
      paginator = this.get("paginator");
      filters = this.get("filters");
      for (_i = 0, _len = filters.length; _i < _len; _i++) {
        filter = filters[_i];
        if (filter.isSelected()) {
          storeData = storeData.filter(function(element, index, array) {
            return filter.filter(element, index, array);
          });
        }
      }
      if (paginator) {
        paginator.setTotalRecords(storeData.length);
      }
      from = 0;
      to = storeData.length;
      if (paginator) {
        from = (paginator.getCurrentPage() - 1) * paginator.getRowsPerPage();
        to = paginator.getCurrentPage() * paginator.getRowsPerPage();
      }
      storeData = storeData.slice(from, to);
      this.tbodyEl.empty();
      for (_j = 0, _len1 = storeData.length; _j < _len1; _j++) {
        record = storeData[_j];
        trEl = jQuery("<tr />");
        if (typeof rowFormatter === "function") {
          rowFormatter(trEl, record);
        }
        trEl.addClass("ex-dt-" + (_i % 2 ? 'odd' : 'even'));
        for (_k = 0, _len2 = columns.length; _k < _len2; _k++) {
          column = columns[_k];
          tdEl = jQuery("<td />");
          if (typeof column.formatter === "function") {
            column.formatter(tdEl, column, record);
          } else {
            tdEl.append(jQuery("<div />").text(record[column.key]));
          }
          if (column.hidden) {
            tdEl.addClass("hidden").css("display", "none");
          }
          tdEl.on("click", function(event) {
            return _this.onCellClick(event, column, record, _this);
          });
          trEl.append(tdEl);
        }
        this.tbodyEl.append(trEl);
      }
      return console.timeEnd("Rendering data");
    };

    DataTable.prototype.onCellClick = function(event, column, record, dataTable) {
      return console.log("onCellClickEvent", arguments);
    };

    /*
     * Custom event handler to sort Column.
    */


    DataTable.prototype.onEventSortColumn = function(column, event) {
      var dir;
      if (column.sortable) {
        dir = this.get("sortedBy").dir === "ASC" ? "DESC" : "ASC";
        return this.sortColumn(column, dir);
      }
    };

    /*
     * Sorts given Column.
    */


    DataTable.prototype.sortColumn = function(column, dir) {
      this.set("sortedBy", {
        key: column.key,
        dir: dir
      });
      column.thEl.parent().find(".ex-dt-asc, .ex-dt-desc").removeClass("ex-dt-asc ex-dt-desc");
      column.thEl.addClass("ex-dt-" + (dir.toLowerCase()));
      this.getStore().sort(column.key, dir);
      return this.render();
    };

    return DataTable;

  })();

  /*
   * The Store class encapsulates a client side cache of Model objects
  */


  Ex.Store = (function() {

    $.extend(Store.prototype, Ex.AttributeProvider.prototype);

    Store.prototype._data = [];

    function Store(configs) {
      this.__init();
      this.setData(configs.data);
      this.cfg = {};
    }

    Store.prototype.setData = function(data) {
      this._data = jQuery.extend([], data);
      return this.emit("onDataChange", this._data);
    };

    Store.prototype.getData = function() {
      return this._data;
    };

    Store.prototype.sortData = function(key, dir) {};

    return Store;

  })();

  /*
   * Small helper class to make creating stores from Array data easier
  */


  Ex.ArrayStore = (function(_super) {

    __extends(ArrayStore, _super);

    function ArrayStore(configs) {
      ArrayStore.__super__.constructor.apply(this, arguments);
    }

    ArrayStore.prototype.sort = function(key, dir) {
      return this.getData().sort(function(a, b) {
        var asc, val1, val2;
        asc = dir === "ASC";
        val1 = a[key];
        val2 = b[key];
        if (val1 < val2) {
          if (asc) {
            return -1;
          } else {
            return 1;
          }
        }
        if (val1 === val2) {
          return 0;
        } else {
          if (asc) {
            return 1;
          } else {
            return -1;
          }
        }
      });
    };

    return ArrayStore;

  })(Ex.Store);

  /*
   * Paginator 
   * Parameters:
   *    config <Object> Object literal to set instance and ui component configuration.
  */


  Ex.Paginator = (function() {

    $.extend(Paginator.prototype, Ex.AttributeProvider.prototype);

    function Paginator(config) {
      this._handlePageChange = __bind(this._handlePageChange, this);
      this.render = __bind(this.render, this);
      this.updateVisibility = __bind(this.updateVisibility, this);
      var defaults;
      this.__init();
      defaults = {
        rowsPerPage: 30,
        rowsPerPageSelect: null,
        containers: '',
        totalRecords: 0,
        currentPage: 1,
        alwaysVisible: false
      };
      config = $.extend(defaults, config);
      config.containers = $(config.containers);
      this.cfg = config;
      this._initUIComponents();
      this.initEvents();
      this._selfSubscribe();
      this.setPage(1);
    }

    Paginator.prototype.updateVisibility = function() {
      var containers, next, prev;
      containers = this.get("containers");
      prev = containers.find(".ex-pg-first, .ex-pg-prev");
      next = containers.find(".ex-pg-last, .ex-pg-next");
      if ((prev.hasClass("disabled") && this.hasPrevPage()) || !this.hasPrevPage()) {
        prev.toggleClass("disabled");
      }
      if ((next.hasClass("disabled") && this.hasNextPage()) || !this.hasNextPage()) {
        return next.toggleClass("disabled");
      }
    };

    /*
     * Render the pagination controls per the format attribute into the specified container nodes.
    */


    Paginator.prototype.render = function() {
      var containers, currentPage, from, i, liEl, nextEl, to, totalPages, totalRecords, _results;
      totalRecords = this.getTotalRecords();
      containers = this.get("containers");
      currentPage = this.getCurrentPage();
      containers.find(".ex-pg-page").remove();
      nextEl = containers.find(".ex-pg-next");
      totalPages = this.getTotalPages();
      to = currentPage + 4;
      from = currentPage - 4;
      if (from <= 0) {
        to += Math.abs(from) + 1;
        from = 1;
      }
      if (to > totalPages) {
        from -= to - totalPages;
        to = totalPages;
      }
      if (from <= 0) {
        from = 1;
      }
      if (to > totalPages) {
        to = totalPages;
      }
      i = from;
      _results = [];
      while (i <= to) {
        liEl = jQuery("<li />", {
          "class": "ex-pg-page"
        }).append(jQuery("<a />", {
          href: "#",
          text: i
        }));
        if (i === currentPage) {
          liEl.addClass("active");
        }
        liEl.insertBefore(nextEl);
        liEl.data("page", i);
        _results.push(i++);
      }
      return _results;
    };

    Paginator.prototype.getTotalRecords = function() {
      return +this.get("totalRecords");
    };

    /*
     * Set the total number of records.
    */


    Paginator.prototype.setTotalRecords = function(total) {
      if (this.getTotalRecords() !== total) {
        return this.set("totalRecords", total);
      }
    };

    Paginator.prototype.getRowsPerPage = function() {
      return this.get("rowsPerPage");
    };

    /*
     * Set the number of rows per page.
    */


    Paginator.prototype.setRowsPerPage = function(number) {
      return this.set("rowsPerPage", number);
    };

    /*
     * Get the page number corresponding to the current record offset.
    */


    Paginator.prototype.getCurrentPage = function() {
      return this.get("currentPage");
    };

    /*
     * Set the current page to the provided page number if possible.
     * Parameters:
     *  newPage <number> the new page number
    */


    Paginator.prototype.setPage = function(newPage) {
      if (this.hasPage(newPage)) {
        return this.set("currentPage", newPage);
      }
    };

    Paginator.prototype.getTotalPages = function() {
      var totalPages;
      totalPages = this.getTotalRecords() / this.getRowsPerPage();
      if (totalPages > Math.floor(totalPages)) {
        totalPages++;
      }
      return Math.floor(totalPages);
    };

    /*
     * Does the requested page have any records?
    */


    Paginator.prototype.hasPage = function(page) {
      if (page < 1) {
        return false;
      }
      return page <= this.getTotalPages();
    };

    /*
     * Are there records on the next page?
    */


    Paginator.prototype.hasNextPage = function() {
      return this.hasPage(this.getCurrentPage() + 1);
    };

    /*
     * Is there a page before the current page?
    */


    Paginator.prototype.hasPrevPage = function() {
      return this.hasPage(this.getCurrentPage() - 1);
    };

    /*
     *  Fires the pageChange event when the state attributes have changed
    */


    Paginator.prototype._handleStateChange = function() {
      var totalPages;
      totalPages = this.getTotalPages();
      if (totalPages <= 1) {
        if (!this.get("alwaysVisible")) {
          this.get("containers").hide("fast");
        }
      } else if (!this.get("alwaysVisible")) {
        this.get("containers").show("fast");
      }
      if (this.getCurrentPage() > totalPages) {
        this.setPage(totalPages);
      }
      this.render();
      return this.updateVisibility();
    };

    /*
     *  Fires the pageChange event when the state attributes have changed
    */


    Paginator.prototype._handlePageChange = function(event) {
      var currentPage, page, target, totalPages;
      target = $(event.currentTarget);
      currentPage = this.getCurrentPage();
      totalPages = this.getTotalPages();
      page = target.data("page");
      if (page === "prev") {
        page = currentPage - 1;
      } else if (page === "next") {
        page = currentPage + 1;
      } else if (page === "last") {
        page = totalPages;
      }
      if (page !== currentPage) {
        return this.setPage(+page);
      }
    };

    Paginator.prototype.initEvents = function() {
      var select,
        _this = this;
      this.get("containers").on("click", "li", this._handlePageChange);
      if (select = this.get("rowsPerPageSelect")) {
        select = jQuery(select);
        return select.on("change", function(event) {
          return _this.set("rowsPerPage", select.val());
        });
      }
    };

    /*
     * Subscribes to instance attribute change events to automate certain behaviors.
    */


    Paginator.prototype._selfSubscribe = function() {
      this.on("rowsPerPageChange", this._handleStateChange);
      this.on("totalRecordsChange", this._handleStateChange);
      this.on("currentPageChange", this.render);
      return this.on("currentPageChange", this.updateVisibility);
    };

    Paginator.prototype._initUIComponents = function() {
      var ulEl;
      ulEl = jQuery("<ul />", {
        "class": "ex-pg"
      });
      ulEl.append(jQuery("<li />", {
        "class": "ex-pg-first"
      }).append(jQuery("<a />", {
        href: "#",
        text: "First"
      })).data("page", 1), jQuery("<li />", {
        "class": "ex-pg-prev"
      }).append(jQuery("<a />", {
        href: "#",
        text: "Prev"
      })).data("page", "prev"), jQuery("<li />", {
        "class": "ex-pg-next"
      }).append(jQuery("<a />", {
        href: "#",
        text: "Next"
      })).data("page", "next"), jQuery("<li />", {
        "class": "ex-pg-last"
      }).append(jQuery("<a />", {
        href: "#",
        text: "Last"
      })).data("page", "last"));
      return this.get("containers").empty().append(ulEl);
    };

    return Paginator;

  })();

  Ex.Filter = (function() {

    $.extend(Filter.prototype, Ex.AttributeProvider.prototype);

    function Filter(config) {
      this.__init();
    }

    Filter.prototype.filter = function(element, index, array) {};

    Filter.prototype.isSelected = function() {};

    return Filter;

  })();

  Ex.Filter.Search = (function(_super) {

    __extends(Search, _super);

    function Search(config) {
      this._applyFilters = __bind(this._applyFilters, this);
      var defaults;
      Search.__super__.constructor.apply(this, arguments);
      defaults = {
        container: null,
        filterFn: this._applyFilters,
        valueUpdate: 'keydown',
        value: ''
      };
      this.cfg = $.extend(defaults, config);
      this.cfg.container = jQuery(this.cfg.container);
      this.initEvents();
    }

    Search.prototype.initEvents = function() {
      var event,
        _this = this;
      event = this.get("valueUpdate");
      return this.get("container").on(event, Ex.util.throttle(function(event) {
        return _this.set("value", jQuery(event.target).val());
      }, 100));
    };

    Search.prototype.filter = function(element, index, array) {
      var _base;
      return typeof (_base = this.get("filterFn")) === "function" ? _base(element, index, array) : void 0;
    };

    Search.prototype.isSelected = function() {
      return !!this.get("value");
    };

    Search.prototype._applyFilters = function(element, index, array) {
      var name, predicate, record, value;
      value = this.get("value").toLowerCase();
      predicate = false;
      for (name in element) {
        record = element[name];
        if (~((record + "").toLowerCase().indexOf(value))) {
          predicate = true;
          break;
        }
      }
      return predicate;
    };

    return Search;

  })(Ex.Filter);

  if ((_ref1 = Ex.util) == null) {
    Ex.util = {};
  }

  Ex.util.throttle = function(fn, delay) {
    var timer;
    timer = null;
    return function() {
      var args, context;
      context = this;
      args = arguments;
      clearTimeout(timer);
      return timer = setTimeout(function() {
        return fn.apply(context, args);
      }, delay);
    };
  };

}).call(this);
